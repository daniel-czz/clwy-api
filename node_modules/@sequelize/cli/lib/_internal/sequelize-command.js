import { Command, Flags } from '@oclif/core';
import { pojo } from '@sequelize/utils';
import inquirer from 'inquirer';
export class SequelizeCommand extends Command {
    static strict = false;
    static baseFlags = {
        interactive: Flags.boolean({
            char: 'i',
            description: 'Run command in interactive mode',
            default: true,
            allowNo: true,
        }),
    };
    async init() {
        await super.init();
        const strictFlagConfig = this.ctor.flags;
        const looseParseFlagConfig = pojo();
        for (const key of Object.keys(strictFlagConfig)) {
            looseParseFlagConfig[key] = {
                ...strictFlagConfig[key],
                required: false,
                default: undefined,
            };
        }
        const { flags: { interactive }, } = await this.parse({
            baseFlags: super.ctor.baseFlags,
            // to access the "interactive" flag, we need to provide all possible flags or
            // the cli will throw if an unknown flag is provided
            flags: looseParseFlagConfig,
            enableJsonFlag: this.ctor.enableJsonFlag,
            strict: false,
        });
        if (!interactive) {
            // in non-interactive mode, all required flags must be provided.
            // re-parse to throw errors for missing required flags
            const { flags } = await this.parse({
                flags: strictFlagConfig,
                baseFlags: super.ctor.baseFlags,
                enableJsonFlag: this.ctor.enableJsonFlag,
                strict: this.ctor.strict,
            });
            this.flags = flags;
            return;
        }
        // In interactive mode, we want to prompt the user for all flags that are not provided.
        // Mark all flags as optional and remove their default value before parsing,
        // then prompt all missing flags
        const { flags } = await this.parse({
            flags: looseParseFlagConfig,
            baseFlags: super.ctor.baseFlags,
            enableJsonFlag: this.ctor.enableJsonFlag,
            strict: this.ctor.strict,
        });
        const inquirerConfig = [];
        for (const flagKey of Object.keys(strictFlagConfig)) {
            if (flagKey in flags) {
                continue;
            }
            inquirerConfig.push(getInquirerConfig(flagKey, strictFlagConfig[flagKey]));
        }
        const promptResult = await inquirer.prompt(inquirerConfig);
        for (const [key, value] of Object.entries(promptResult)) {
            flags[key] = value;
        }
        this.flags = flags;
    }
}
function getInquirerConfig(flagName, flag) {
    const commonOptions = {
        default: flag.default,
        suffix: ` ${flag.summary}`,
        name: flagName,
    };
    switch (flag.type) {
        case 'option': {
            if (flag.options) {
                return {
                    ...commonOptions,
                    choices: flag.options,
                    type: flag.multiple ? 'checkbox' : 'list',
                };
            }
            return { ...commonOptions, type: 'input' };
        }
        case 'boolean':
            return { ...commonOptions, type: 'confirm' };
    }
    // @ts-expect-error -- just in case
    throw new Error(`Unsupported flag type: ${flag.type}`);
}
